////////
// Scope
////////

// var a = "global a";
// var b = "global b";
// var c = "global c";
// var foo = 1;

// {
//   var a = "outer a";
//   var b = "outer b";

//   {
//     var a = "inner a";
//     print a;
//     print b;
//     print c;

//     foo = 2;
//   }

//   print a;
//   print b;
//   print c;
// }

// print a;
// print b;
// print c;

//////////
// If-Else
//////////

// if (true) {
//     print 1;
// }

// if (1) {
//     print "1 is truthy";
// } else {
//     print "1 is not truthy";
// }

// if (0) {
//     print "0 is truthy";
// } else {
//     print "0 is not truthy";
// }

// if (1 + 1 == 2) {
//     print "1 + 1 == 2";
// } else {
//     print "1 + 1 != 2";
// }

////////////////////
// Logic expressions
////////////////////

// print false and true;
// print false or true;
// print true and "asdf";
// print false or "asdf";
// print nil or "asdf";

////////
// While
////////

// var i = 0;
// while (i < 10) {
//     print i;
//     i = i + 1;
// }

//////
// For
//////


// // print "start infinite loop";
// // for (;;) {
// //     print "infinite loop";
// // }
// // print "end infinite loop";

// print "start false loop";
// for (;false;) {
//     print "false";
// }
// print "end false loop";

// print "start cond-only loop";
// var i = 0;
// for (; i < 10;) {
//     print i;
//     i = i + 1;
// }
// print "end cond-only loop";


// print "start nondeclaration loop";
// var j = 0;
// for (j = 0; j < 10; j = j + 1) {
//     print j;
// }
// print "end nondeclaration loop";

// print "start declaration loop";
// for (var i = 0; i < 10; i = i + 1) {
//     print i;
// }
// print "end declaration loop";

/////////////////
// Function calls
/////////////////

// var time_start = clock();

// var sum = 0;
// for (var i = 0; i < 100000; i = i + 1) {
//     sum = sum + 1;
// }

// var time_end = clock();

// print "elapsed millis: ";
// print time_end - time_start;

////////////////////////
// Function declarations
////////////////////////

// fun foo() {
//     print "Hello, World!";
// }

// foo;
// foo();

// var bar = foo;
// bar;
// bar();

// fun outer() {
//     fun inner(p) {
//         print "inner param:";
//         print p;
//     }

//     print "outer calling inner";
//     inner(3.14);
//     print "outer called inner";
// }

// print outer();

// fun add(a, b) {
//     return a + b;
// }

// print add(1, 1);
// print add(2, 3);

// fun make_fun() {
//     fun fn(a) {
//         return a + 1;
//     }

//     return fn;
// }

// var f = make_fun();
// print f;
// print f(0);
// print f(1.23);

///////////
// Closures
///////////

var mutate_func;
var print_func;
{
    var i = 0;
    fun mutate_i() {
        i = i + 1;
    }
    fun print_i() {
        print i;
    }

    mutate_i();
    print_i();

    mutate_func = mutate_i;
    print_func = print_i;
}

mutate_func();
print_func();
mutate_func();
print_func();
mutate_func();
print_func();

fun makePoint(x, y) {
    fun closure(method) {
        if (method == "x") return x;
        if (method == "y") return y;
        print "unknown method " + method;
    }

    return closure;
}

var point = makePoint(2, 3);
print point("x"); // "2".
print point("y"); // "3".

fun scope(a) {
    print a;
    var a = "inner";
    print a;
}
scope("param");

// Nasty closure leak

var a = "global";
{
    fun showA() {
        print a;
    }

    showA();

    var a = "block";

    // This prints "block" if the leak is not fixed, but should always
    // print "global"

    showA();
}
